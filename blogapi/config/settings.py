"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 3.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path
from environs import Env

env = Env()
env.read_env()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env.str("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # needed for allauth to work
    "django.contrib.sites",
    
    # 3rd party
    "rest_framework",
    # Any changes to apps need a db sync : python manage.py migrate
    "rest_framework.authtoken",
    # For user registration or signup endpoint, writting our own views, urls, etc from scratch (as django or REST doesn't have default) is a somewhat risky approach. We can use a popular third party package django-allauth that can solve this for us.
    # Integrated set of Django applications addressing authentication, registration, account management as well as 3rd party (social) account authentication is what allauth does.
    # pipenv install django-allauth
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    # Drop-in API endpoints for handling authentication securely in Django Rest Framework.
    # pipenv install dj-rest-auth
    "dj_rest_auth",
    # Adding the below from the dj package will give us user endpoints.
    "dj_rest_auth.registration",
    
    # My apps
    "posts",
    # "posts.apps.PostsConfig"
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'

# The below AllowAny allows anyone to modify the data within our project. It's used for testing only and not for production. We can limit access to project level, view level, or object level.
# • AllowAny - any user, authenticated or not, has full access
# • IsAuthenticated - only authenticated, registered users have access
# • IsAdminUser - only admins/superusers have access
# • IsAuthenticatedOrReadOnly - unauthorized users can view any page, but only authenticated
# users have write, edit, or delete privileges

# Old global allow all
# REST_FRAMEWORK = {
#     'DEFAULT_PERMISSION_CLASSES': [
#         'rest_framework.permissions.AllowAny',
#     ]
# }

# New auth only
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    
    # Django REST Framework comes with a number of settings82 that are implicitly set. For example, DEFAULT_PERMISSION_CLASSES was set to AllowAny before we updated it to IsAuthenticated above.
    # The DEFAULT_AUTHENTICATION_CLASSES are set by default so let’s explicitly add both SessionAuthentication and BasicAuthentication
    # We are using both methods because they serve different purposes. Session is used to power the browsable API and the ability to log in and out. BasicAuth is used to pass the session ID in the HTTP headers for the API itself.
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        # 'rest_framework.authentication.BasicAuthentication'
        # To use tokens we update the above to:
        'rest_framework.authentication.TokenAuthentication',
        # We also need to add the authtoken app in INSTALLED_APPS which generates the tokens on the server.
    ],
}

# The email back-end config is needed since by default an email will be sent when a new user is
# registered, asking them to confirm their account. Rather than also set up an email server, we will
# output the emails to the console with the console.EmailBackend setting.
# The default text can be updated and an email SMTP server added with additional configuration that is covered in the beginners book.
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# # SITE_ID is part of the built-in Django “sites” framework, which is a way to host multiple
# websites from the same Django project. We obviously only have one site we are working on here
# but django-allauth uses the sites framework, so we must specify a default setting.
SITE_ID = 1
